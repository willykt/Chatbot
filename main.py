import streamlit as st

st.set_page_config(
    page_title="ChatData",
    page_icon="ü™Ñ",
    layout='wide'

)



st.title("Interactua con tus documentos üë©‚Äçüíªüìù")


st.title("ChatExcel")

st.markdown("""
                Permite a los usuarios interactuar con un archivo Excel utilizando modelos de lenguaje (LLMs) a trav√©s de la integraci√≥n con **LangChain** ü¶úÔ∏èüîó y la API de **Gemini** üî∑ de Google. La funcionalidad principal de ChatExcel incluye:

                1. **Carga de archivos Excel**: Los usuarios pueden subir archivos Excel (.xlsx, .xls) para que la aplicaci√≥n lea las hojas de c√°lculo.
                2. **Interacci√≥n con el archivo**: Utiliza LangChain y modelos LLM para generar respuestas basadas en los datos de las hojas de Excel, permitiendo consultas y an√°lisis.
                3. **Selecci√≥n de agente**: Los usuarios pueden elegir entre diferentes agentes (ZERO_SHOT_REACT_DESCRIPTION y OPENAI_FUNCTIONS) para interactuar con el archivo.
                4. **Gesti√≥n de la sesi√≥n**: El c√≥digo almacena el historial de mensajes y el estado del agente para mantener una conversaci√≥n fluida.
                5. **Formatos de respuesta**: Mejora el formato de salida de los agentes, limpiando el texto y resaltando los pasos del razonamiento.
                6. **Interfaz intuitiva**: La aplicaci√≥n cuenta con pesta√±as para chat y visualizaci√≥n de los "pensamientos" del modelo, haciendo la interacci√≥n m√°s comprensible.

                En resumen, este c√≥digo ofrece una plataforma de interacci√≥n avanzada con hojas de Excel mediante inteligencia artificial, ideal para realizar an√°lisis o consultas sobre los datos de forma eficiente.
            """)


st.title("ChatPDF")

st.markdown("""

                ChatPDF que permite a los usuarios cargar un archivo PDF, extraer su contenido y hacer consultas basadas en el texto extra√≠do utilizando un modelo de lenguaje generativo de Google **Gemini** üî∑, todo esto integrado con **LangChain** ü¶úÔ∏èüîó. Detalles de funcionamiento:

                
                1. **Carga de PDF**: El usuario puede subir un archivo PDF mediante la interfaz de usuario, y el texto se extrae usando la librer√≠a `PyPDF2`.
                2. **Extracci√≥n del Texto**: Se extrae el texto de cada p√°gina del archivo PDF y se procesa para su posterior uso.
                3. **Gemini API Key**: El usuario debe ingresar una clave API de Gemini en la barra lateral, la cual se usa para acceder a los servicios de Google Generative AI.
                4. **Segmentaci√≥n Sem√°ntica del Texto**: El texto extra√≠do del PDF se segmenta en partes m√°s peque√±as (chunks) usando un `SemanticChunker`, que utiliza embeddings generados por Google Gemini para detectar puntos de ruptura basados en diferencias sem√°nticas.
                5. **Embeddings y Vector Store**: Los fragmentos de texto segmentados se convierten en embeddings y se almacenan en memoria utilizando `DocArrayInMemorySearch`, permitiendo la b√∫squeda y recuperaci√≥n de documentos relevantes.
                6. **Consulta del Usuario**: El usuario puede realizar consultas mediante una entrada de texto. La consulta se eval√∫a en el contexto de los documentos extra√≠dos del PDF, y el modelo `ChatGoogleGenerativeAI` genera una respuesta basada en ese contexto.
                7. **Interfaz de Respuesta**: Las respuestas generadas se muestran en la interfaz de chat.

                ChatPDF facilita la interacci√≥n entre un usuario y el contenido de un PDF, permitiendo hacer preguntas y recibir respuestas contextualizadas utilizando IA generativa.

                            """)